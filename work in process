import os
import json
import sys
import subprocess
import logging
import asyncio
from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QPushButton, QVBoxLayout, QLineEdit, 
                             QFileDialog, QTextBrowser, QCheckBox, QMessageBox, QComboBox, 
                             QProgressBar)
from PyQt5.QtCore import Qt
from playwright.async_api import async_playwright  # Use async Playwright API

# List of required modules
REQUIRED_MODULES = ['PyQt5', 'playwright']

def install_package(package):
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
    except subprocess.CalledProcessError as e:
        print(f"Error installing package {package}: {e}")

def check_and_install_modules():
    for package in REQUIRED_MODULES:
        try:
            __import__(package)
        except ImportError:
            print(f"Module {package} not found. Installing...")
            install_package(package)
        else:
            print(f"Module {package} is already installed.")

# Ensure all required modules are available
check_and_install_modules()

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

class LoginAutomationApp(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()
        self.script_data = []
        self.credentials = []
        self.progress_bar.setValue(0)
        self.paused = False

    def init_ui(self):
        self.setWindowTitle("Automated Login Tool - v2.0 - Asyncio")
        self.setGeometry(100, 100, 800, 600)

        # Layout
        layout = QVBoxLayout()

        # Proxy input
        self.proxy_label = QLabel("Proxy Type:")
        self.proxy_type = QComboBox(self)
        self.proxy_type.addItems(["None", "HTTP", "SOCKS5", "HTTPS", "SOCKS4"])
        layout.addWidget(self.proxy_label)
        layout.addWidget(self.proxy_type)

        self.proxy_input_label = QLabel("Proxy Address (Optional):")
        self.proxy_input = QLineEdit(self)
        layout.addWidget(self.proxy_input_label)
        layout.addWidget(self.proxy_input)

        self.proxy_auth_label = QLabel("Proxy Auth (Optional):")
        self.proxy_auth = QLineEdit(self)
        layout.addWidget(self.proxy_auth_label)
        layout.addWidget(self.proxy_auth)

        # Username and Password fields
        self.username_field_label = QLabel("Username Field Selector:")
        self.username_field = QLineEdit(self)
        layout.addWidget(self.username_field_label)
        layout.addWidget(self.username_field)

        self.password_field_label = QLabel("Password Field Selector:")
        self.password_field = QLineEdit(self)
        layout.addWidget(self.password_field_label)
        layout.addWidget(self.password_field)

        # Success selector input
        self.success_label = QLabel("Success Element Selector (Optional):")
        self.success_input = QLineEdit(self)
        layout.addWidget(self.success_label)
        layout.addWidget(self.success_input)

        # Custom Headers
        self.headers_label = QLabel("Custom Headers (JSON):")
        self.headers_input = QLineEdit(self)
        layout.addWidget(self.headers_label)
        layout.addWidget(self.headers_input)

        # Debug mode checkbox
        self.debug_checkbox = QCheckBox("Enable Debug Mode")
        layout.addWidget(self.debug_checkbox)

        # Headless mode checkbox
        self.headless_checkbox = QCheckBox("Enable Headless Mode")
        layout.addWidget(self.headless_checkbox)

        # Add a button to upload a credentials file
        self.upload_credentials_button = QPushButton("Upload Accounts", self)
        self.upload_credentials_button.clicked.connect(self.upload_credentials)
        layout.addWidget(self.upload_credentials_button)

        # Record Script button
        self.record_script_button = QPushButton("Record Script", self)
        self.record_script_button.clicked.connect(self.record_script)
        layout.addWidget(self.record_script_button)

        # Import Script button
        self.import_script_button = QPushButton("Import Script", self)
        self.import_script_button.clicked.connect(self.import_script)
        layout.addWidget(self.import_script_button)

        # Start button
        self.start_button = QPushButton("Start", self)
        self.start_button.clicked.connect(self.start_login_process)
        layout.addWidget(self.start_button)

        # Log area
        self.log_area = QTextBrowser(self)
        self.log_area.setReadOnly(True)
        layout.addWidget(self.log_area)

        # Progress bar
        self.progress_bar = QProgressBar(self)
        self.progress_bar.setMinimum(0)
        layout.addWidget(self.progress_bar)

        self.setLayout(layout)

    def upload_credentials(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Open Accounts File", "", "Text Files (*.txt);;All Files (*)")
        if file_path:
            self.load_credentials(file_path)

    def load_credentials(self, file_path):
        self.credentials = []
        try:
            with open(file_path, 'r') as file:
                for line in file:
                    username, password = line.strip().split(":")
                    self.credentials.append((username, password))
            self.log(f"{len(self.credentials)} accounts loaded.")
        except Exception as e:
            self.log(f"Error loading accounts: {e}")

    def record_script(self):
        self.script_data = []  # Reset the script data before recording
        self.log("Starting browser for script recording...")

        async def record_browser_interaction():
            async with async_playwright() as p:  # Switch to async_playwright
                browser = await p.chromium.launch(headless=False)
                page = await browser.new_page()

                # Event listeners to track interactions
                page.on("framenavigated", lambda frame: self.on_navigate(frame))
                page.on("click", lambda event: self.on_click(event))
                page.on("input", lambda event: self.on_input(event))

                await page.goto("about:blank")  # Open a blank page for testing
                self.log("Browser open. Record your actions.")

                await asyncio.sleep(60)  # Keep the browser open for 60 seconds
                await browser.close()

        asyncio.run(record_browser_interaction())
        self.save_script()

    def on_navigate(self, frame):
        url = frame.url
        self.script_data.append({"action": "navigate", "url": url})
        self.log(f"Recorded navigation to: {url}")

    def on_click(self, element):
        selector = element.selector
        self.script_data.append({"action": "click", "selector": selector})
        self.log(f"Recorded click on: {selector}")

    def on_input(self, element):
        selector = element.selector
        value = element.value
        self.script_data.append({"action": "input", "selector": selector, "value": value})
        self.log(f"Recorded input on {selector} with value {value}")

    def save_script(self):
        script_path = os.path.join(os.getcwd(), "login_script.json")
        with open(script_path, "w") as f:
            json.dump(self.script_data, f, indent=4)
        self.log(f"Script saved to {script_path}")

    def import_script(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Open Script File", "", "JSON Files (*.json);;All Files (*)")
        if file_path:
            try:
                with open(file_path, 'r') as f:
                    self.script_data = json.load(f)
                self.log(f"Script imported from {file_path}.")
            except Exception as e:
                self.log(f"Error importing script: {e}")

    async def start_login_process(self):
        if not self.credentials:
            self.show_error("No accounts loaded. Please upload a file with accounts in 'username:password' format.")
            return

        total_attempts = len(self.credentials)
        self.progress_bar.setMaximum(total_attempts)

        tasks = []
        async with async_playwright() as p:
            for username, password in self.credentials:
                task = asyncio.create_task(self.perform_login(p, username, password))
                tasks.append(task)
                self.progress_bar.setValue(self.progress_bar.value() + 1)

            await asyncio.gather(*tasks)
        self.log("All login attempts finished.")

    async def perform_login(self, playwright, username, password):
        try:
            browser = await playwright.chromium.launch(headless=self.headless_checkbox.isChecked())
            context = await browser.new_context()
            page = await context.new_page()

            # Execute actions based on script
            for action in self.script_data:
                if action["action"] == "navigate":
                    await page.goto(action["url"])
                elif action["action"] == "click":
                    await page.click(action["selector"])
                elif action["action"] == "input":
                    if "username" in action["selector"]:
                        await page.fill(action["selector"], username)
                    elif "password" in action["selector"]:
                        await page.fill(action["selector"], password)

            if await page.query_selector(self.success_input.text()):
                self.log(f"Login successful for {username}")
            else:
                self.log(f"Login failed for {username}")

            await browser.close()
        except Exception as e:
            self.log(f"Error for {username}: {e}")

    def log(self, message):
        self.log_area.append(message)

    def show_error(self, message):
        QMessageBox.critical(self, "Error", message)

if __name__ == '__main__':
    check_and_install_modules()
    app = QApplication(sys.argv)
    login_app = LoginAutomationApp()
    login_app.show()
    sys.exit(app.exec_())

